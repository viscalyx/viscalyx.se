#!/usr/bin/env node

/**
 * Security audit script for build-time sanitization
 *
 * This script runs the sanitization security tests to ensure that
 * the blog data generation process is properly sanitizing content.
 */

const { execSync } = require('node:child_process')
const path = require('node:path')

console.log('üîí Running security audit for build-time sanitization...\n')

try {
  // Run the sanitization-specific tests
  const testCommand =
    'npx vitest run scripts/__tests__/build-blog-data-sanitization.test.mjs --reporter=verbose'
  console.log('Running sanitization security tests...')
  execSync(testCommand, { stdio: 'inherit', cwd: process.cwd() })

  console.log('\n‚úÖ Sanitization security tests passed!')

  // Run the integration tests
  const integrationTestCommand =
    'npx vitest run scripts/__tests__/build-blog-data-integration.test.js --reporter=verbose'
  console.log('\nRunning integration security tests...')
  execSync(integrationTestCommand, { stdio: 'inherit', cwd: process.cwd() })

  console.log('\n‚úÖ Integration security tests passed!')
  console.log('\nüéâ Security audit completed successfully!')
  console.log('\nüìä Security audit summary:')
  console.log('  ‚úì XSS prevention tests')
  console.log('  ‚úì Content sanitization tests')
  console.log('  ‚úì Legitimate content preservation tests')
  console.log('  ‚úì Integration tests with actual build process')
  console.log('  ‚úì Reading time calculation security tests')
} catch (error) {
  console.error('\n‚ùå Security audit failed!')
  console.error('\nError details:')
  console.error(error.message)

  // Analyze error type and provide specific guidance
  const errorMessage = error.message.toLowerCase()
  const errorOutput = error.stdout ? error.stdout.toString() : ''
  const combinedError = `${errorMessage} ${errorOutput}`.toLowerCase()

  console.log('\nüö® Specific troubleshooting guidance:')

  if (
    combinedError.includes('command not found') ||
    combinedError.includes('npx')
  ) {
    console.log('  üì¶ Dependency Issue:')
    console.log(
      '    ‚Ä¢ Run "npm install" to ensure all dependencies are installed'
    )
    console.log('    ‚Ä¢ Verify Vitest is properly installed in package.json')
    console.log('    ‚Ä¢ Check if npx is available in your PATH')
  } else if (combinedError.includes('test') && combinedError.includes('fail')) {
    console.log('  üß™ Test Failure Analysis:')
    if (combinedError.includes('sanitization')) {
      console.log(
        '    ‚Ä¢ XSS prevention tests failed - review sanitize-html configuration'
      )
      console.log(
        '    ‚Ä¢ Check if new malicious patterns need to be added to tests'
      )
      console.log('    ‚Ä¢ Verify sanitization rules in build-blog-data.js')
    } else if (combinedError.includes('integration')) {
      console.log(
        '    ‚Ä¢ Integration tests failed - check build process compatibility'
      )
      console.log('    ‚Ä¢ Verify blog content files are accessible and valid')
      console.log('    ‚Ä¢ Review file system permissions for content directory')
    } else {
      console.log(
        '    ‚Ä¢ Review test output above for specific assertion failures'
      )
      console.log('    ‚Ä¢ Check if test data or expectations need updating')
    }
  } else if (
    combinedError.includes('enoent') ||
    combinedError.includes('no such file')
  ) {
    console.log('  üìÅ File System Issue:')
    console.log(
      '    ‚Ä¢ Missing test files - ensure test directory structure is correct'
    )
    console.log('    ‚Ä¢ Check if build-blog-data-sanitization.test.js exists')
    console.log('    ‚Ä¢ Check if build-blog-data-integration.test.js exists')
    console.log('    ‚Ä¢ Verify content/blog directory exists with test files')
  } else if (
    combinedError.includes('permission') ||
    combinedError.includes('eacces')
  ) {
    console.log('  üîí Permission Issue:')
    console.log('    ‚Ä¢ Check file permissions for test files and directories')
    console.log('    ‚Ä¢ Ensure current user has read/execute permissions')
    console.log('    ‚Ä¢ Consider running with appropriate permissions')
  } else if (combinedError.includes('timeout')) {
    console.log('  ‚è±Ô∏è Timeout Issue:')
    console.log('    ‚Ä¢ Tests are taking too long - check for infinite loops')
    console.log('    ‚Ä¢ Consider increasing Vitest timeout configuration')
    console.log('    ‚Ä¢ Review performance of sanitization operations')
  } else if (
    combinedError.includes('memory') ||
    combinedError.includes('heap')
  ) {
    console.log('  üíæ Memory Issue:')
    console.log('    ‚Ä¢ Increase Node.js memory limit with --max-old-space-size')
    console.log('    ‚Ä¢ Check for memory leaks in sanitization process')
    console.log('    ‚Ä¢ Review size of test data files')
  } else {
    console.log('  üîç General Recommendations:')
    console.log(
      '    ‚Ä¢ Review the sanitization configuration in build-blog-data.js'
    )
    console.log('    ‚Ä¢ Ensure sanitize-html is up to date')
    console.log('    ‚Ä¢ Check for any new XSS vectors in the failing tests')
    console.log(
      '    ‚Ä¢ Verify that legitimate content is not being over-sanitized'
    )
  }

  console.log('\nüìã Next steps:')
  console.log('  1. Address the specific issue identified above')
  console.log('  2. Re-run the security audit: npm run security-audit')
  console.log('  3. If issues persist, check the full error output above')
  console.log('  4. Consider running individual test files for debugging')

  process.exit(1)
}
